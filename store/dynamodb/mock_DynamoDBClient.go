// Code generated by mockery. DO NOT EDIT.

package dynamodb

import (
	context "context"

	servicedynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// MockDynamoDBClient is an autogenerated mock type for the DynamoDBClient type
type MockDynamoDBClient struct {
	mock.Mock
}

type MockDynamoDBClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoDBClient) EXPECT() *MockDynamoDBClient_Expecter {
	return &MockDynamoDBClient_Expecter{mock: &_m.Mock}
}

// BatchGetItem provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBClient) BatchGetItem(_a0 context.Context, _a1 *servicedynamodb.BatchGetItemInput, _a2 ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchGetItemOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetItem")
	}

	var r0 *servicedynamodb.BatchGetItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.BatchGetItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchGetItemOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.BatchGetItemInput, ...func(*servicedynamodb.Options)) *servicedynamodb.BatchGetItemOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedynamodb.BatchGetItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicedynamodb.BatchGetItemInput, ...func(*servicedynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBClient_BatchGetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchGetItem'
type MockDynamoDBClient_BatchGetItem_Call struct {
	*mock.Call
}

// BatchGetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *servicedynamodb.BatchGetItemInput
//   - _a2 ...func(*servicedynamodb.Options)
func (_e *MockDynamoDBClient_Expecter) BatchGetItem(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBClient_BatchGetItem_Call {
	return &MockDynamoDBClient_BatchGetItem_Call{Call: _e.mock.On("BatchGetItem",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBClient_BatchGetItem_Call) Run(run func(_a0 context.Context, _a1 *servicedynamodb.BatchGetItemInput, _a2 ...func(*servicedynamodb.Options))) *MockDynamoDBClient_BatchGetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicedynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicedynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicedynamodb.BatchGetItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBClient_BatchGetItem_Call) Return(_a0 *servicedynamodb.BatchGetItemOutput, _a1 error) *MockDynamoDBClient_BatchGetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBClient_BatchGetItem_Call) RunAndReturn(run func(context.Context, *servicedynamodb.BatchGetItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchGetItemOutput, error)) *MockDynamoDBClient_BatchGetItem_Call {
	_c.Call.Return(run)
	return _c
}

// BatchWriteItem provides a mock function with given fields: ctx, params, optFns
func (_m *MockDynamoDBClient) BatchWriteItem(ctx context.Context, params *servicedynamodb.BatchWriteItemInput, optFns ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchWriteItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchWriteItem")
	}

	var r0 *servicedynamodb.BatchWriteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.BatchWriteItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchWriteItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.BatchWriteItemInput, ...func(*servicedynamodb.Options)) *servicedynamodb.BatchWriteItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedynamodb.BatchWriteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicedynamodb.BatchWriteItemInput, ...func(*servicedynamodb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBClient_BatchWriteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchWriteItem'
type MockDynamoDBClient_BatchWriteItem_Call struct {
	*mock.Call
}

// BatchWriteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicedynamodb.BatchWriteItemInput
//   - optFns ...func(*servicedynamodb.Options)
func (_e *MockDynamoDBClient_Expecter) BatchWriteItem(ctx interface{}, params interface{}, optFns ...interface{}) *MockDynamoDBClient_BatchWriteItem_Call {
	return &MockDynamoDBClient_BatchWriteItem_Call{Call: _e.mock.On("BatchWriteItem",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockDynamoDBClient_BatchWriteItem_Call) Run(run func(ctx context.Context, params *servicedynamodb.BatchWriteItemInput, optFns ...func(*servicedynamodb.Options))) *MockDynamoDBClient_BatchWriteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicedynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicedynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicedynamodb.BatchWriteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBClient_BatchWriteItem_Call) Return(_a0 *servicedynamodb.BatchWriteItemOutput, _a1 error) *MockDynamoDBClient_BatchWriteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBClient_BatchWriteItem_Call) RunAndReturn(run func(context.Context, *servicedynamodb.BatchWriteItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.BatchWriteItemOutput, error)) *MockDynamoDBClient_BatchWriteItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function with given fields: ctx, params, optFns
func (_m *MockDynamoDBClient) DeleteItem(ctx context.Context, params *servicedynamodb.DeleteItemInput, optFns ...func(*servicedynamodb.Options)) (*servicedynamodb.DeleteItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 *servicedynamodb.DeleteItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.DeleteItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.DeleteItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.DeleteItemInput, ...func(*servicedynamodb.Options)) *servicedynamodb.DeleteItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedynamodb.DeleteItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicedynamodb.DeleteItemInput, ...func(*servicedynamodb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBClient_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type MockDynamoDBClient_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicedynamodb.DeleteItemInput
//   - optFns ...func(*servicedynamodb.Options)
func (_e *MockDynamoDBClient_Expecter) DeleteItem(ctx interface{}, params interface{}, optFns ...interface{}) *MockDynamoDBClient_DeleteItem_Call {
	return &MockDynamoDBClient_DeleteItem_Call{Call: _e.mock.On("DeleteItem",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockDynamoDBClient_DeleteItem_Call) Run(run func(ctx context.Context, params *servicedynamodb.DeleteItemInput, optFns ...func(*servicedynamodb.Options))) *MockDynamoDBClient_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicedynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicedynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicedynamodb.DeleteItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBClient_DeleteItem_Call) Return(_a0 *servicedynamodb.DeleteItemOutput, _a1 error) *MockDynamoDBClient_DeleteItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBClient_DeleteItem_Call) RunAndReturn(run func(context.Context, *servicedynamodb.DeleteItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.DeleteItemOutput, error)) *MockDynamoDBClient_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// PutItem provides a mock function with given fields: ctx, params, optFns
func (_m *MockDynamoDBClient) PutItem(ctx context.Context, params *servicedynamodb.PutItemInput, optFns ...func(*servicedynamodb.Options)) (*servicedynamodb.PutItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 *servicedynamodb.PutItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.PutItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.PutItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.PutItemInput, ...func(*servicedynamodb.Options)) *servicedynamodb.PutItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedynamodb.PutItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicedynamodb.PutItemInput, ...func(*servicedynamodb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBClient_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type MockDynamoDBClient_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - ctx context.Context
//   - params *servicedynamodb.PutItemInput
//   - optFns ...func(*servicedynamodb.Options)
func (_e *MockDynamoDBClient_Expecter) PutItem(ctx interface{}, params interface{}, optFns ...interface{}) *MockDynamoDBClient_PutItem_Call {
	return &MockDynamoDBClient_PutItem_Call{Call: _e.mock.On("PutItem",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *MockDynamoDBClient_PutItem_Call) Run(run func(ctx context.Context, params *servicedynamodb.PutItemInput, optFns ...func(*servicedynamodb.Options))) *MockDynamoDBClient_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicedynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicedynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicedynamodb.PutItemInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBClient_PutItem_Call) Return(_a0 *servicedynamodb.PutItemOutput, _a1 error) *MockDynamoDBClient_PutItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBClient_PutItem_Call) RunAndReturn(run func(context.Context, *servicedynamodb.PutItemInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.PutItemOutput, error)) *MockDynamoDBClient_PutItem_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockDynamoDBClient) Query(_a0 context.Context, _a1 *servicedynamodb.QueryInput, _a2 ...func(*servicedynamodb.Options)) (*servicedynamodb.QueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *servicedynamodb.QueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.QueryInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.QueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicedynamodb.QueryInput, ...func(*servicedynamodb.Options)) *servicedynamodb.QueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicedynamodb.QueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicedynamodb.QueryInput, ...func(*servicedynamodb.Options)) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDBClient_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDynamoDBClient_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *servicedynamodb.QueryInput
//   - _a2 ...func(*servicedynamodb.Options)
func (_e *MockDynamoDBClient_Expecter) Query(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockDynamoDBClient_Query_Call {
	return &MockDynamoDBClient_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockDynamoDBClient_Query_Call) Run(run func(_a0 context.Context, _a1 *servicedynamodb.QueryInput, _a2 ...func(*servicedynamodb.Options))) *MockDynamoDBClient_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*servicedynamodb.Options), len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(func(*servicedynamodb.Options))
			}
		}
		run(args[0].(context.Context), args[1].(*servicedynamodb.QueryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockDynamoDBClient_Query_Call) Return(_a0 *servicedynamodb.QueryOutput, _a1 error) *MockDynamoDBClient_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBClient_Query_Call) RunAndReturn(run func(context.Context, *servicedynamodb.QueryInput, ...func(*servicedynamodb.Options)) (*servicedynamodb.QueryOutput, error)) *MockDynamoDBClient_Query_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamoDBClient creates a new instance of MockDynamoDBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoDBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoDBClient {
	mock := &MockDynamoDBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
